BUSINESS PARABLE GENERATOR
This is a full stack web application that generates pithy summaries of business parables. I'm struck by how all business parables sound exactly the same so I figure it'll be simple to make something that creates one on the fly.

Will probably need:
-Node (to work with MongoDB)
-MongoDB (I want to use this to practice full stack databases)
-React (want to get sharper with this skill)
-Express (to manage Node)
-Mocha (would really like to practice formal testing, and Jest was a little too tricky for me to understand; we'll try Mocha)
-TypeScript (want to train further in this)
-Bootstrap (CSS styling)

POSSIBLE STRUCTURE:
-app.js (run code, basic '/' route, render pages)
-index.jsx (runs the react code - but might probably have to connect to a Node backend: however, React could be dropped in as a <script>?)
-components folder (button, main app component, generated parable text)
-routes folder? 
-The React app (hosted on Heroku) would have to connect with a MongoDB database (also hosted on Heroku, maybe, or MongoDB Atlas for cloud)
--React is just for the render client side; still would be within the app itself committed to Heroku

/controller
../functions
/model
../database
/view
../components

STEPS:
-set up hello world app using React and Node backend connected; we'll probably establish the NodeJS backend first, then create a seperate React app as a client that points to it
-attach bare MongoDB to hello world app to ensure connectivity; would probably be best served doing MongoDB Atlas and connecting that way
-set up component design and functionality to generate one of two results, touching the entire stack
-add further options for parable generation in DB
-optimize app with better front end design


## LOG
5/25
-planned out structure of app

5/26
-set up Express hello world
-installed express/mongoose/dotenv/mocha/chai/typescript/cors/body-parser/axios packages
-further planning of step by step app build approach
NEXT: use Axios to set up router with new create-react-app and understand WHY that works

5/27
-install axios
-create react app: client; tested to make sure it runs
-added and exported custom component to test
-began developing React component state designed to use axios to pull from backend; need to test
MORE STUDY NEEDED: HTTP requests, React fundamentals review

5/28
-set up full frontend/backend connection (watch for typos)
-signed up for MongoDB Atlas (cloud DB) and configured for new project and data cluster.
-installed mongodb package
-started configure: Node connection to Atlas via Mongoose to load up sample DB

5/29
-got Mongoose setup and connected to MongoDB Atlas
-tested connection
-setting up Schema and model to work with test collection
-able to connect to test collection in DB

5/30
tested MongoDB with own schema/model and adding data
-planned how to get data from Atlas to Node backend to React frontend
-able to successfully get Node to pull up MongoDB data object
NEXT: need to test React's ability to pull and initially render data

5/31
-had a lot of trouble working with React's async state and updating it with data; will try using button to grab it since the parable gen will have a button
-got state to do better BUT to make sure it doesn't reset, you want to pass the state into the parent component and then pass it down via props

6/1
-pushed state to App component and props down into child component: still same problem, wonder if the component mount is resetting it
-had to revamp connection to backend and frontend
-used e.preventDefault to prevent state reversion on click event
NEXT: work on successfully passing backend data to frontend for use: use .fetch through axios

6/2
-learning how axios pulls data when making get requests
-having a lot of trouble figuring it out: maybe I need to drill into this area
-REMEMBER: solve a smaller problem first, break it down, then work back up to where you're stuck
--TO FIX: we need to study how this works, need to grab a good code example to work off from and understand; also look for axios beginner guides

6/3
-set up concurrent script to run frontend/backend at the same time
-still struggling with pulling in data: I need to really get the fundamentals of promises down and ask someone for help on this bit using the code and what I'm trying to do
-> it will pull from the MongoDB but when I load it into a new variable in the other module it returns as undefined which then passes on as undefined to the React frontend: outside of this, sending data works fine so the problem may be in the async nature of it
# hit the docs, hit general MongoDB guides at this point to construct the basics, ask people = don't get fancy, do the basics if needed

6/4
testing: function will run and log data it finds, but when trying to return it elsewhere, it returns as undefined or returns nothing when JSON stringified
-the await/async is running fine, it's just that the returned object is never filled
-seems to be a callback issue since the whole thing is async; may have to write as a promise to get it down
-might be worth hand copying tough code examples directly to understand
-did callback.js practice to work through callbacks and try to grok them better
-installed linter to assist
-was able to get it to render by just calling the function directly
NEXT: continue reviewing callback/promises basics

6/5
-tested full stack to ensure it was working
-destructured incoming res.data object and set state to app
-added additional state settings to render in component
-roughed out next steps
NEXT: we want to approach our tracer bullet development: next is making the button that creates the parable on clicking, then V1 of the actual app design

6/6
-outlined conditional rendering based on state
-set toggle state and created new component to start page
-set button to switch to "generated" parable on click

6/7
-got CC photo to use for app
-installed yarn for dependencies
-installed react-bootstrap; added button with CDN link to test styling
-designed layout of application: definitely need to learn good website design principles
NEXT: work on adding styling to Intro component; then add TS proper

6/8
-added intial react-bootstrap styling to test
-did styling on Intro component
-added font in dedicated src/fonts folder and successfully added

6/9
-worked on applying styling to get app in proper layout (copying from existing themes might be best to learn what to do)
-able to get full-screen background color for app component
-applied drop shadow, box shadow

6/11
-still working on sizing image properly; will probably have to ask how to arrange layout I want

6/12
-worked on layout, but still challenging to get right to do what I want - definitely need to take CSS courses to understand it better

6/14
-removed React-bootstrap and went with pure bootstrap: layout is going better
-moving to functionality for a while to restore momentum

6/15
-worked on developing approach to randomizing document pulls

6/16
-worked out plan for document pulls: will create documents as sample size and then pull multiple times to create custom object, then push that to React

6/18
updated planned collections, installed mongo shell for practice to add documents
-docs added to mongodb atlas
NEXT: set about preparing doc access in app.js

6/19
-worked on trying to do random documents through Mongoose; confirmed that what's pulled can easily be isolated and probably moved to another object

6/20
-set up random functionality to pull documents randomly; exploring ways to do that for each entry

6/21
-working on psuedocode: trying to find nice way to roll docs and assign particular values to json

6/23
-installed underscore.js for function help
-worked out how to set up proper object; will roll documents and use nested objects to generate json needed

6/24
-set up lodash and made progress on successfully using async function to roll for documents; still working out iterating this 14 times to set up a nested array for what I can use to populate the final object

6/25
-still trying to workout async properly

6/26
-made progress working with async; plan to use total async function to create payload needed

6/27
-successfully rendered random person payload; next step is to load into React state and render it on page

6/28
-destructured incoming props, set up state to reflect accurate documents, loaded new parable into Summary component and tested generation

6/29
-button now automatically rolls documents from backend, generates parable, and pushes to page
-installed View Rendered Source extension to get better sense of app architecture

6/30
replaced picture and worked on revamping facing design; trying to settle out opacity and chosen background image

7/1
working on design

7/2
using Bootstrap one-page example to help line up design and get app pushed out faster

7/4
used Bootstrap example to finalize working design
NEXT: push to Heroku and test live site: env values, test run with DB connection, confirm working then write README

7/5
read about Heroku implementation; NEXT ACTION is to push as is and see what goes wrong

7/6
-created heroku remote and pushed app to it
-testing out heroku connection; can confirm it grabs server backend info

QoL8675309

"Corporate Photography - Businessman Portrait" by vanitystudiosphotography is licensed under CC BY 2.0 
Photo by fauxels from Pexels

NEXT ACTIONS
-set up Heroku space and repo
-add backend to one Heroku and frontend to another
-set env for both sides
-test connection

https://www.freecodecamp.org/news/deploying-a-mern-application-using-mongodb-atlas-to-heroku/